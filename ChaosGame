// Include important C++ libraries here
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <sstream>
#include <vector>
#include <cstdlib> 

// Make code easier to type with "using namespace"
using namespace sf;
using namespace std;

int main()
{
	sf::Font font;
	sf::Text text;
	text.setFont(font);
	text.setCharacterSize(12);
	text.setFillColor(sf::Color::Red);
	// Create a video mode object
	VideoMode vm(1920, 1080);
	// Create and open a window for the game
	RenderWindow window(vm, "Timber Game!!", Style::Default);
	vector<Vector2f> vertices;
    	vector<Vector2f> points;
	while (window.isOpen())
	{
		text.setString("Click on any three points on the screen");
		window.draw(text);
        /*
		****************************************
		Handle the players input
		****************************************
		*/
        	Event event;
		while (window.pollEvent(event))
		{
            		if (event.type == Event::Closed)
            		{
				// Quit the game when the window is closed
				window.close();
            		}
            		if (event.type == sf::Event::MouseButtonPressed)
            		{
                		if (event.mouseButton.button == sf::Mouse::Left)
                		{
                    			std::cout << "the left button was pressed" << std::endl;
                    			std::cout << "mouse x: " << event.mouseButton.x << std::endl;
                    			std::cout << "mouse y: " << event.mouseButton.y << std::endl;

                    			if(vertices.size() < 3)
                    			{
                        			vertices.push_back(Vector2f(event.mouseButton.x, event.mouseButton.y));
                    			}
                   			else if(points.size() == 0)
                    			{
                        			text.setString("Click anywhere to start");
						window.draw(text);
						points.push_back(Vector2f(event.mouseButton.x, event.mouseButton.y));
                        			///push back to points vector
                    			}
                		}
            		}
        	}
        	if (Keyboard::isKeyPressed(Keyboard::Escape))
		{
			window.close();
		}
        /*
		****************************************
		Update
		****************************************
		*/

        	if(points.size() > 0)
        	{
            		///generate more point(s)
            		///select random vertex
            		///calculate midpoint between random vertex and the last point in the vector
            		///push back the newly generated coord.
			int randomVertex;
			for(i = 0; i < 100; i++){
				randomVertex = rand() % 3;
				if(randomVertex == 0){
					
				}
				if(randomVertex == 0){

				}
				if(randomVertex == 0){

				}
			}
			
        	}

        /*
		****************************************
		Draw
		****************************************
		*/
        	window.clear();
        	for(int i = 0; i < vertices.size(); i++)
        	{
            		RectangleShape rect(Vector2f(10,10));
            		rect.setPosition(Vector2f(vertices[i].x, vertices[i].y));
            		rect.setFillColor(Color::Blue);
            		window.draw(rect);
        	}
        	window.display();
    	}
}
